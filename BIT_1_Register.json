{
	"info": {
		"_postman_id": "31bc5a40-a4c1-44a7-b8da-7c02c0581e97",
		"name": "TO EXPORT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11372355"
	},
	"item": [
		{
			"name": "Register module",
			"item": [
				{
					"name": "POST /auth/sign-up",
					"item": [
						{
							"name": "POST /auth/sign-up",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"num = Math.floor(Math.random() * 10000);\r",
											"\r",
											"testRegisterEmail = \"bit_test_ion_\" + num+ \"@yopmail.com\";\r",
											"pm.environment.set(\"testRegisterEmail\", testRegisterEmail)\r",
											"console.log(testRegisterEmail)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{testRegisterEmail}}\",\r\n    \"password\": \"22123124242232sds#@@sS\",\r\n    \"confirm_password\": \"22123124242232sds#@@sS\",\r\n    \"lang\": \"en\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up - required fields are empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"errors\": {\r",
											"            \"type\": \"array\",\r",
											"            \"items\": [\r",
											"                {\r",
											"                    \"type\": \"object\",\r",
											"                    \"properties\": {\r",
											"                        \"rule\": {\r",
											"                            \"type\": \"string\"\r",
											"                        },\r",
											"                        \"field\": {\r",
											"                            \"type\": \"string\"\r",
											"                        },\r",
											"                        \"message\": {\r",
											"                            \"type\": \"string\"\r",
											"                        }\r",
											"                    },\r",
											"                    \"required\": [\r",
											"                        \"rule\",\r",
											"                        \"field\",\r",
											"                        \"message\"\r",
											"                    ]\r",
											"                },\r",
											"                {\r",
											"                    \"type\": \"object\",\r",
											"                    \"properties\": {\r",
											"                        \"rule\": {\r",
											"                            \"type\": \"string\"\r",
											"                        },\r",
											"                        \"field\": {\r",
											"                            \"type\": \"string\"\r",
											"                        },\r",
											"                        \"message\": {\r",
											"                            \"type\": \"string\"\r",
											"                        }\r",
											"                    },\r",
											"                    \"required\": [\r",
											"                        \"rule\",\r",
											"                        \"field\",\r",
											"                        \"message\"\r",
											"                    ]\r",
											"                },\r",
											"                {\r",
											"                    \"type\": \"object\",\r",
											"                    \"properties\": {\r",
											"                        \"rule\": {\r",
											"                            \"type\": \"string\"\r",
											"                        },\r",
											"                        \"field\": {\r",
											"                            \"type\": \"string\"\r",
											"                        },\r",
											"                        \"message\": {\r",
											"                            \"type\": \"string\"\r",
											"                        }\r",
											"                    },\r",
											"                    \"required\": [\r",
											"                        \"rule\",\r",
											"                        \"field\",\r",
											"                        \"message\"\r",
											"                    ]\r",
											"                },\r",
											"                {\r",
											"                    \"type\": \"object\",\r",
											"                    \"properties\": {\r",
											"                        \"rule\": {\r",
											"                            \"type\": \"string\"\r",
											"                        },\r",
											"                        \"field\": {\r",
											"                            \"type\": \"string\"\r",
											"                        },\r",
											"                        \"message\": {\r",
											"                            \"type\": \"string\"\r",
											"                        }\r",
											"                    },\r",
											"                    \"required\": [\r",
											"                        \"rule\",\r",
											"                        \"field\",\r",
											"                        \"message\"\r",
											"                    ]\r",
											"                }\r",
											"            ]\r",
											"        }\r",
											"    },\r",
											"    \"required\": [\r",
											"        \"errors\"\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"})\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"})\r",
											"\r",
											"//3\r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\" + loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"})\r",
											"\r",
											"//4\r",
											"pm.test(\"Lang is required message isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[3].message).to.equal(\"The lang is required\")\r",
											"})\r",
											"\r",
											"//5\r",
											"pm.test(\"The password is required - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[2].message).to.equal(\"The password is required\")\r",
											"})\r",
											"\r",
											"//6\r",
											"pm.test(\"The confirm_password is required - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[1].message).to.equal(\"The confirm_password is required\")\r",
											"})\r",
											"\r",
											"//7\r",
											"pm.test(\"The email is required - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"The email is required\")\r",
											"})\r",
											"//  pm.test(\"Schema\", function () {\r",
											"// pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"\r",
											"\r",
											"//8\r",
											"pm.test(\"Validate the response schema\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.errors).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    responseData.errors.forEach(function (error) {\r",
											"        pm.expect(error).to.be.an('object');\r",
											"        pm.expect(error.rule).to.be.a('string');\r",
											"        pm.expect(error.field).to.be.a('string');\r",
											"        pm.expect(error.message).to.be.a('string');\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"\",\r\n    \"confirm_password\": \"\",\r\n    \"lang\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up - empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => { \r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Lang is required message isn't matched\", () => { \r",
											"    pm.expect(jsondata.errors[3].message).to.equal(\"The lang is required\")\r",
											"    })\r",
											"\r",
											"//5\r",
											"pm.test(\"The password is required - isn't matched\", () => {\r",
											"     pm.expect(jsondata.errors[2].message).to.equal(\"The password is required\")\r",
											"     })\r",
											"\r",
											"//6 \r",
											"pm.test(\"The confirm_password is required - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[1].message).to.equal(\"The confirm_password is required\")\r",
											"    })   \r",
											"\r",
											"//7\r",
											"pm.test(\"The email is required - isn't matched\", () => { \r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"The email is required\")\r",
											"    }) \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up - password != confirm_password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"//1\r",
											"pm.test(\"Status is 422\", () => { \r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"    \r",
											"//2\r",
											"pm.test(\"Schema is correct\", () => { \r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3    \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"    \r",
											"//4\r",
											"pm.test(\"Passwords do not match - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Passwords do not match\")\r",
											"    }) \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"a@mail.ru\",\r\n    \"password\": \"Password!1\",\r\n    \"confirm_password\": \"Password!12\",\r\n    \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up - at least one Uppercase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Check - at least one Uppercase\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Password do not match the conditions\")\r",
											"    }) \r",
											"    \r",
											"        \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"a@mail.ru\",\r\n    \"password\": \"assword!1\",\r\n    \"confirm_password\": \"assword!1\",\r\n    \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up - at least one Lowercase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })     \r",
											"\r",
											"//3\r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Password do not match the conditions - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Password do not match the conditions\")\r",
											"    }) \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"a@mail.ru\",\r\n    \"password\": \"ASSWORD!1\",\r\n    \"confirm_password\": \"ASSWORD!1\",\r\n    \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up - valid special characters in password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })     \r",
											"\r",
											"//3\r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Invalid email format message - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    }) \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"assas\",\r\n    \"password\": \"pASSWORD1@$!%*?&#^\",\r\n    \"confirm_password\": \"pASSWORD1@$!%*?&#^\",\r\n    \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up - invalid special characters in password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"     \r",
											"//3\r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Password do not match the conditions - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Password do not match the conditions\")\r",
											"    })   \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"a@mail.ru\",\r\n    \"password\": \"pASSWORD1<>\",\r\n    \"confirm_password\": \"pASSWORD1<>\",\r\n    \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up - at least one number in password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Response has status code 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											" \r",
											"//2\r",
											"pm.test(\"responce schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3\r",
											"pm.test(\"Password do not match\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Password do not match the conditions\")\r",
											"    })\r",
											"\r",
											"//4\r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											" \r",
											"\r",
											"   \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"a@mail.ru\",\r\n    \"password\": \"pASSWORD<>\",\r\n    \"confirm_password\": \"pASSWORD<>\",\r\n    \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up - password length < MIN password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {   \r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })     \r",
											"\r",
											"//3\r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Password do not match the conditions - isn't matched\", () => {\r",
											"     pm.expect(jsondata.errors[0].message).to.equal(\"Password do not match the conditions\")\r",
											"     })  \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"a@mail.ru\",\r\n    \"password\": \"pA1#^\",\r\n    \"confirm_password\": \"pA1#^\",\r\n    \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up - password length == MIN password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"The lang is required\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"The lang is required\")\r",
											"    })    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"a@mail.ru\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n    \"lang\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up - password with spaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"  \r",
											"//4\r",
											"pm.test(\"Password do not match the conditions - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Password do not match the conditions\")\r",
											"    }) \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"a@mail.ru\",\r\n    \"password\": \" pA1234#^\",\r\n    \"confirm_password\": \" pA1234#^\",\r\n    \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up- password with cyrillic symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											" //1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"// //2    \r",
											"// pm.test(\"Schema is correct\", () => {\r",
											"//     pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"//     })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Password do not match the conditions - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Password do not match the conditions\")\r",
											"    })    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"a@mail.ru\",\r\n    \"password\": \"аяA1234#^\",\r\n    \"confirm_password\": \"аяA1234#^\",\r\n    \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up - invalid email - without domain part",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"The email is required - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })  \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"dasdasdasd\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n    \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up - invalid email - without local part",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"   \r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"The email is required - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })   \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"@mail.ru\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n    \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up - invalid email - without dot at domain part",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"The email is required - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })  \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"a@mailru\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n    \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up - invalid email - without second part of domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"The email is required - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })  \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"a@mail.\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n    \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up - invalid email - at least two symbols after  .",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4    \r",
											"pm.test(\"The email is required - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })  \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"aas@s.a\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n    \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up - invalid email - space before email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											" //1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"The email is required - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \" aas@ss.a\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n    \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up - invalid email - already registered",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Email already exists - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Email already exists\")\r",
											"    })  \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"isabaleuski@omertex.com\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n    \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up - invalid language code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"args\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"choices\": {\r",
											"                  \"type\": \"array\",\r",
											"                  \"items\": [\r",
											"                    {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    {\r",
											"                      \"type\": \"string\"\r",
											"                    }\r",
											"                  ]\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"choices\"\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\",\r",
											"            \"args\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"  //1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"    \r",
											"//4    \r",
											"pm.test(\"enum validation failed on lang - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"enum validation failed on lang\")\r",
											"    })  \r",
											"    \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"bit_test_ion1@yopmail.com\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n    \"lang\": \"esn\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up - valid language code - ru",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4    \r",
											"pm.test(\"enum validation failed on lang - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).not.to.equal(\"enum validation failed on lang\")\r",
											"    })  \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"bit_test_ion@yopmail.com\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n    \"lang\": \"ru\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up -  invalid type of email value (array)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"  //1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"string validation failed on email - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"string validation failed on email\")\r",
											"    })  \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": [\"bit_test_ion@yopmail.com\"],\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n    \"lang\": \"ru\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up -  invalid type of password value (array)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4    \r",
											"pm.test(\"string validation failed on password - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"string validation failed on password\")\r",
											"    })    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"bit_test_iona@yopmail.com\",\r\n    \"password\": [\"pA1234#^\"],\r\n    \"confirm_password\": \"pA1234#^\",\r\n    \"lang\": \"ru\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up-  invalid type of repeat password value (array)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											" //1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"    \r",
											"//4    \r",
											"pm.test(\"string validation failed on confirm_password - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"string validation failed on confirm_password\")\r",
											"    })  \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"bit_test_iona@yopmail.com\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": [\"pA1234#^\"],\r\n    \"lang\": \"ru\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up -  invalid type of language value (array)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = { \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"args\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"choices\": {\r",
											"                  \"type\": \"array\",\r",
											"                  \"items\": [\r",
											"                    {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    {\r",
											"                      \"type\": \"string\"\r",
											"                    }\r",
											"                  ]\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"choices\"\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\",\r",
											"            \"args\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"enum validation failed on lang - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"enum validation failed on lang\")\r",
											"    })      \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"bit_test_iona@yopmail.com\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n    \"lang\": [\"ru\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up -  NOT RUN* - Extra filed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = { \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"args\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"choices\": {\r",
											"                  \"type\": \"array\",\r",
											"                  \"items\": [\r",
											"                    {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    {\r",
											"                      \"type\": \"string\"\r",
											"                    }\r",
											"                  ]\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"choices\"\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\",\r",
											"            \"args\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"enum validation failed on lang - isn't matched\", () => { \r",
											"pm.expect(jsondata.errors[0].message).to.equal(\"enum validation failed on lang\")\r",
											"})      \r",
											"    \r",
											"\r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"bit_test_iona@yopmail.com\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n    \"lang\": [\"ru\"],\r\n    \"pas\": \"231saS&test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-up-  PUT instead of POST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {    \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"stack\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"code\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"stack\",\r",
											"    \"code\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 405\", () => {\r",
											"    pm.response.to.have.status(405)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4    \r",
											"pm.test(\"E_ROUTE_NOT_FOUND: Cannot PUT:/auth/sign-up message - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"E_ROUTE_NOT_FOUND: Cannot PUT:/auth/sign-up\")\r",
											"    })  \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"bit_test_iona@yopmail.com\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n    \"lang\": [\"ru\"],\r\n    \"pas\": \"231saS&test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /sign-up/verification",
					"item": [
						{
							"name": "POST /sign-up/verification - valid",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"80483s\",\r\n    \"email\": \"bit_test_ion@yopmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up/verification",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up",
										"verification"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /sign-up/verification - empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"The code is required - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[1].message).to.equal(\"The code is required\")\r",
											"    })   \r",
											"\r",
											"//5\r",
											"pm.test(\"The email is required - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"The email is required\")\r",
											"    }) \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up/verification",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up",
										"verification"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /sign-up/verification - code - int type instead of string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {    \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"    \r",
											"  //1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"string validation failed on code - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"string validation failed on code\")\r",
											"    }) \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": 80483,\r\n    \"email\": \"bit_test_ion@yopmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up/verification",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up",
										"verification"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /sign-up/verification  - code - length < 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"args\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"minLength\": {\r",
											"                  \"type\": \"integer\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"minLength\"\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\",\r",
											"            \"args\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Minimum code length is 6 characters - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Minimum code length is 6 characters\")\r",
											"    })    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"8043\",\r\n    \"email\": \"bit_test_ion@yopmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up/verification",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up",
										"verification"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /sign-up/verification  - code - length > 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"args\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"maxLength\": {\r",
											"                  \"type\": \"integer\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"maxLength\"\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\",\r",
											"            \"args\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4    \r",
											" pm.test(\"Maximum code length is 6 characters - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Maximum code length is 6 characters\")\r",
											"    })    \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"8043627\",\r\n    \"email\": \"bit_test_ion@yopmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up/verification",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up",
										"verification"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /sign-up/verification  - code - spaces in code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Code is incorrect - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Code is incorrect\")\r",
											"    })    \r",
											"    \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear \r",
											"    pm.sendRequest({\r",
											"        'method': 'POST',\r",
											"  'url': 'https://dev.btr.omertex.com/auth/sign-up',\r",
											"        header: {\r",
											"            'content-type': 'application/json',\r",
											" \r",
											"            'Accept': \"*/*\"\r",
											"        },\r",
											"\r",
											" body: JSON.stringify({\r",
											"   \"email\":\"bit_test_ion@yopmail.com\",\r",
											"    \"password\": \"22123124242232sds#@@sS\",\r",
											"    \"confirm_password\": \"22123124242232sds#@@sS\",\r",
											"    \"lang\": \"en\"\r",
											"  })\r",
											"\r",
											"    },\r",
											"\r",
											"  (err, res) => {\r",
											"    \r",
											"   \r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"      \",\r\n    \"email\": \"bit_test_ion@yopmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up/verification",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up",
										"verification"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /sign-up/verification  - code - entered code != expected code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"   \r",
											"//1\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"//4\r",
											"pm.test(\"Code is incorrect - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Code is incorrect\")\r",
											"    })    \r",
											"     \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear \r",
											"    pm.sendRequest({\r",
											"        'method': 'POST',\r",
											"  'url': 'https://dev.btr.omertex.com/auth/sign-up',\r",
											"        header: {\r",
											"            'content-type': 'application/json',\r",
											"            'Accept': \"*/*\"\r",
											"        },\r",
											"\r",
											" body: JSON.stringify({\r",
											"   \"email\":\"bit_test_ion@yopmail.com\",\r",
											"    \"password\": \"22123124242232sds#@@sS\",\r",
											"    \"confirm_password\": \"22123124242232sds#@@sS\",\r",
											"    \"lang\": \"en\"\r",
											"  })\r",
											"\r",
											"    },\r",
											"\r",
											"  (err, res) => {\r",
											"    \r",
											"   \r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"123456\",\r\n    \"email\": \"bit_test_ion@yopmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up/verification",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up",
										"verification"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /sign-up/verification  - code - figures in code value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"    \r",
											"   \r",
											"//1\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4    \r",
											"pm.test(\"Code is incorrect - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Code is incorrect\")\r",
											"    })    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear \r",
											"    pm.sendRequest({\r",
											"        'method': 'POST',\r",
											"  'url': 'https://dev.btr.omertex.com/auth/sign-up',\r",
											"        header: {\r",
											"            'content-type': 'application/json',\r",
											"            'Accept': \"*/*\"\r",
											"        },\r",
											"\r",
											" body: JSON.stringify({\r",
											"   \"email\":\"bit_test_ion@yopmail.com\",\r",
											"    \"password\": \"22123124242232sds#@@sS\",\r",
											"    \"confirm_password\": \"22123124242232sds#@@sS\",\r",
											"    \"lang\": \"en\"\r",
											"  })\r",
											"\r",
											"    },\r",
											"\r",
											"  (err, res) => {\r",
											"    \r",
											"   \r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"011a00\",\r\n    \"email\": \"bit_test_ion@yopmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up/verification",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up",
										"verification"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /sign-up/verification - code - special characters (valid) in code value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"    \r",
											"//4\r",
											"pm.test(\"Code is incorrect - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Code is incorrect\")\r",
											"    })    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear \r",
											"    pm.sendRequest({\r",
											"        'method': 'POST',\r",
											"  'url': 'https://dev.btr.omertex.com/auth/sign-up',\r",
											"        header: {\r",
											"            'content-type': 'application/json',\r",
											"            'Accept': \"*/*\"\r",
											"        },\r",
											"\r",
											" body: JSON.stringify({\r",
											"   \"email\":\"bit_test_ion@yopmail.com\",\r",
											"    \"password\": \"22123124242232sds#@@sS\",\r",
											"    \"confirm_password\": \"22123124242232sds#@@sS\",\r",
											"    \"lang\": \"en\"\r",
											"  })\r",
											"\r",
											"    },\r",
											"\r",
											"  (err, res) => {\r",
											"    \r",
											"   \r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"000%00\",\r\n    \"email\": \"bit_test_ion@yopmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up/verification",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up",
										"verification"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /sign-up/verification - Invalid email - registered user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"    \r",
											"//4\r",
											"pm.test(\"User already verified - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"User already verified\")\r",
											"    })    \r",
											"    \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"000000\",\r\n    \"email\": \"isabaleuski@omertex.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up/verification",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up",
										"verification"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /sign-up/verification - invalid email- unexisted user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"User not found - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"User not found\")\r",
											"    })        \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"000000\",\r\n    \"email\": \"bit_test_ion_zx@yopmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up/verification",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up",
										"verification"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /sign-up/verification -  invalid email - without local part",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"    \r",
											"//4    \r",
											"pm.test(\"Invalid email format - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })  \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"000000\",\r\n    \"email\": \"@yopmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up/verification",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up",
										"verification"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /sign-up/verification -  invalid email - without domail part",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Invalid email format - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })  \r",
											"    \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"000000\",\r\n    \"email\": \"bit_test_ion_zx@\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up/verification",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up",
										"verification"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /sign-up/verification - invalid email - without dot at domail part",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Invalid email format - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })  \r",
											"    \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"000000\",\r\n    \"email\": \"a@mailru\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up/verification",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up",
										"verification"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /sign-up/verification - invalid email - without second part of domain part",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Invalid email format - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"000000\",\r\n    \"email\": \"a@mail.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up/verification",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up",
										"verification"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /sign-up/verification - invalid email - at least two symbols after .",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Invalid email format - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })  \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"000000\",\r\n    \"email\": \"aas@s.a\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up/verification",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up",
										"verification"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /sign-up/verification - invalid email - space before email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"  \r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Invalid email format - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"000000\",\r\n    \"email\": \" a@mail.ru\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up/verification",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up",
										"verification"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /sign-up/verification - invalid email -  invalid type of email value (array)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4    \r",
											"pm.test(\"string validation failed on email - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"string validation failed on email\")\r",
											"    })  \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"000000\",\r\n    \"email\": [\"a@mail.ru\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up/verification",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up",
										"verification"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /sign-up/verification - PUT instead of POST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {    \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"stack\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"code\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"stack\",\r",
											"    \"code\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 405\", () => {\r",
											"    pm.response.to.have.status(405)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4    \r",
											"pm.test(\"E_ROUTE_NOT_FOUND: Cannot PUT:/auth/sign-up/verification message - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"E_ROUTE_NOT_FOUND: Cannot PUT:/auth/sign-up/verification\")\r",
											"    })  \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"000000\",\r\n    \"email\": [\"a@mail.ru\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-up/verification",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-up",
										"verification"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /auth/sign-in",
					"item": [
						{
							"name": "POST /auth/sign-in/ - success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"\r",
											"\r",
											"token = jsondata.token\r",
											"\r",
											"pm.environment.set (\"token\", token)\r",
											"\r",
											"\r",
											"var schema = { \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"type\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"token\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"expires_at\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"type\",\r",
											"    \"token\",\r",
											"    \"expires_at\"\r",
											"  ]\r",
											"}\r",
											"r = jsondata.expires_at\r",
											"\r",
											"\r",
											"pm.environment.set(\"time_s\", r)\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"//1\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											" \r",
											"\r",
											"//5\r",
											"pm.test(\"Type of expires_at - correct\", () => {\r",
											"    pm.expect(jsondata.expires_at).to.be.a(\"string\")\r",
											"    })  \r",
											"\r",
											"//6\r",
											"pm.test(\"Type of token - correct\", () => {\r",
											"    pm.expect(jsondata.token).to.be.a(\"string\")\r",
											"    }) \r",
											"\r",
											"//7\r",
											"pm.test(\"token type  - bearer\", () => { \r",
											"    pm.expect(jsondata.type).to.equal(\"bearer\")\r",
											"    }) \r",
											"\r",
											"\r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{exUserLogin221}}\",\r\n    \"password\": \"{{exUserPassword221}}\",\r\n    \"lang\": \"en\",\r\n    \"code\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-in",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-in/ - success - expires_at time and token are  updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"var schema = { \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"type\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"token\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"expires_at\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"type\",\r",
											"    \"token\",\r",
											"    \"expires_at\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"  \r",
											"//1\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"/auth/sign-in/ - success\", () => {\r",
											"    exp_time = jsondata.expires_at\r",
											"    const exp_time_d = new Date(exp_time);\r",
											"    a = pm.environment.get(\"time_s\");\r",
											"    a_env_time = new Date(a);\r",
											"    pm.expect(a_env_time).to.be.lessThan(exp_time_d)\r",
											"    pm.environment.set(\"time_s\", exp_time)\r",
											"    })\r",
											"\r",
											"//5\r",
											"env_token = pm.environment.get(\"time_s\");\r",
											"token = jsondata.token\r",
											"pm.test(\"env_token doesn't  equal  token - success\", () => {\r",
											"    (pm.expect(env_token).to.not.equal(token))\r",
											"    pm.environment.set(\"token\", token)\r",
											"    });\r",
											"  \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{exUserLogin221}}\",\r\n    \"password\": \"{{exUserPassword221}}\",\r\n    \"lang\": \"en\",\r\n    \"code\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-in",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-in/ - invalid - empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"var schema = { \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"The email is required - pass\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"The email is required\")\r",
											"    })\r",
											"\r",
											"//5\r",
											"pm.test(\"The password is required - pass\", () => {\r",
											"    pm.expect(jsondata.errors[1].message).to.equal(\"The password is required\")\r",
											"    })  \r",
											"      \r",
											"//6\r",
											"pm.test(\"The lang is required - pass\", () => {\r",
											"    pm.expect(jsondata.errors[2].message).to.equal(\"The lang is required\")\r",
											"    }) \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-in",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-in/ - invalid email - unregistered user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsondata = pm.response.json();\r",
											"\r",
											"var schema = {  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"  \r",
											" //1\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"User not found - pass\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"User not found\")\r",
											"    })\r",
											"  \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"bit_test_ion_xz1@yopmail.com\",\r\n    \"password\": \"12345TeST!\",\r\n    \"lang\": \"en\",\r\n    \"code\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-in",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-in/ - invalid email - without local part",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsondata = pm.response.json();\r",
											"\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"    \r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Invalid email format - pass\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    }) \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"@yopmail.com\",\r\n    \"password\": \"12345TeST!\",\r\n    \"lang\": \"en\",\r\n    \"code\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-in",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-in/ - invalid email - without domain part",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsondata = pm.response.json();\r",
											"\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"    \r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Invalid email format - pass\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })   \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"bit_test_ion@\",\r\n    \"password\": \"12345TeST!\",\r\n    \"lang\": \"en\",\r\n    \"code\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-in",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-in/ - invalid email - without dot at domain part",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsondata = pm.response.json();\r",
											"\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Invalid email format - pass\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"bit_test_ion@mailru\",\r\n    \"password\": \"12345TeST!\",\r\n    \"lang\": \"en\",\r\n    \"code\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-in",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-in/- invalid email - without second part of at domain part",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsondata = pm.response.json();\r",
											"\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"    \r",
											" //1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Invalid email format - pass\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })       \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"bit_test_ion@mail.\",\r\n    \"password\": \"12345TeST!\",\r\n    \"lang\": \"en\",\r\n    \"code\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-in",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-in/- invalid email - at least two symbols after .",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsondata = pm.response.json();\r",
											"\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Invalid email format - pass\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })      \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"bit_test_ion@s.s\",\r\n    \"password\": \"12345TeST!\",\r\n    \"lang\": \"en\",\r\n    \"code\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-in",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-in/- invalid email - space before email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsondata = pm.response.json();\r",
											"\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Invalid email format - pass\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })       \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \" bit_test_ion@yopmail.com\",\r\n    \"password\": \"12345TeST!\",\r\n    \"lang\": \"en\",\r\n    \"code\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-in",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-in/- invalid email -  invalid type of email value (array)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsondata = pm.response.json();\r",
											"\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Invalid email format - pass\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"string validation failed on email\")\r",
											"    })    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": [\"bit_test_ion@yopmail.com\"],\r\n    \"password\": \"12345TeST!\",\r\n    \"lang\": \"en\",\r\n    \"code\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-in",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-in/ - invalid password -  invalid type of email value (int)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsondata = pm.response.json();\r",
											"\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"    \r",
											" //1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"string validation failed on password - pass\", () => { \r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"string validation failed on password\")\r",
											"    })     \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"bit_test_ion@yopmail.com\",\r\n    \"password\": 12345678,\r\n    \"lang\": \"en\",\r\n    \"code\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-in",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-in/ - wrong password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsondata = pm.response.json();\r",
											"\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											" //1\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Invalid credentials message - pass\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid credentials\")\r",
											"    })     \r",
											"     \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{exUserLogin221}}\",\r\n    \"password\": \"12345678\",\r\n    \"lang\": \"en\",\r\n    \"code\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-in",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-in/ - invalid code (with 2fa ON) - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// var jsondata = pm.response.json();\r",
											"\r",
											"\r",
											"// var schema = { \"type\": \"object\",\r",
											"//   \"properties\": {\r",
											"//     \"errors\": {\r",
											"//       \"type\": \"array\",\r",
											"//       \"items\": [\r",
											"//         {\r",
											"//           \"type\": \"object\",\r",
											"//           \"properties\": {\r",
											"//             \"message\": {\r",
											"//               \"type\": \"string\"\r",
											"//             }\r",
											"//           },\r",
											"//           \"required\": [\r",
											"//             \"message\"\r",
											"//           ]\r",
											"//         }\r",
											"//       ]\r",
											"//     }\r",
											"//   },\r",
											"//   \"required\": [\r",
											"//     \"errors\"\r",
											"//   ]\r",
											"// }\r",
											"   \r",
											"//1\r",
											"pm.test(\"Status code is 406\", () => {\r",
											"    pm.response.to.have.status(406)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"// pm.test(\"Schema is correct\", () => {\r",
											"//     pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"//     })\r",
											"pm.test(\"Body matches string - TFA required\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"TFA required\");\r",
											"});\r",
											"\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											" \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"isabaleuski@omertex.com\",\r\n    \"password\": \"12345TeST!\",\r\n    \"lang\": \"en\",\r\n    \"code\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-in",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-in/ - invalid code (with 2fa ON) - wrong",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsondata = pm.response.json();\r",
											"\r",
											"\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"   \r",
											"//1\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"// pm.test(\"Body matches string - TFA required\", function () {\r",
											"//     pm.expect(pm.response.text()).to.include(\"TFA required\");\r",
											"// });\r",
											"\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											" \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"isabaleuski@omertex.com\",\r\n    \"password\": \"12345TeST!\",\r\n    \"lang\": \"en\",\r\n    \"code\": \"342336\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-in",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-in/ - invalid code (with 2fa ON) - wrong type of code value (int)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsondata = pm.response.json();\r",
											"\r",
											"\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"   \r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"// pm.test(\"Body matches string - TFA required\", function () {\r",
											"//     pm.expect(pm.response.text()).to.include(\"TFA required\");\r",
											"// });\r",
											"\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											" //4\r",
											"pm.test(\"string validation failed on code message- pass\", () => { \r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"string validation failed on code\")\r",
											"    }) \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"isabaleuski@omertex.com\",\r\n    \"password\": \"12345TeST!\",\r\n    \"lang\": \"en\",\r\n    \"code\": 342336\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-in",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-in/ - invalid code (with 2fa ON) - min length (< 6)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsondata = pm.response.json();\r",
											"\r",
											"\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"   \r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"// pm.test(\"Body matches string - TFA required\", function () {\r",
											"//     pm.expect(pm.response.text()).to.include(\"TFA required\");\r",
											"// });\r",
											"\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											" //4\r",
											"pm.test(\"Minimum code length is 6 characters message- pass\", () => { \r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Minimum code length is 6 characters\")\r",
											"    }) \r",
											"\r",
											" //5\r",
											"pm.test(\"minLength is 6  - pass\", () => { \r",
											"    pm.expect(jsondata.errors[0].args.minLength).to.equal(6)\r",
											"    })     \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"isabaleuski@omertex.com\",\r\n    \"password\": \"12345TeST!\",\r\n    \"lang\": \"en\",\r\n    \"code\": \"34336\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-in",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-in/- invalid code (with 2fa ON) - max length (> 6)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsondata = pm.response.json();\r",
											"\r",
											"\r",
											"var schema = {    \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"args\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"maxLength\": {\r",
											"                  \"type\": \"integer\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"maxLength\"\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\",\r",
											"            \"args\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"   \r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"// pm.test(\"Body matches string - TFA required\", function () {\r",
											"//     pm.expect(pm.response.text()).to.include(\"TFA required\");\r",
											"// });\r",
											"\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											" //4\r",
											"pm.test(\"Maximum code length is 6 characters - pass\", () => { \r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Maximum code length is 6 characters\")\r",
											"    }) \r",
											"\r",
											" //5\r",
											"pm.test(\"minLength is 6  - pass\", () => { \r",
											"    pm.expect(jsondata.errors[0].args.maxLength).to.equal(6)\r",
											"    })     \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"isabaleuski@omertex.com\",\r\n    \"password\": \"12345TeST!\",\r\n    \"lang\": \"en\",\r\n    \"code\": \"34336231\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-in",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-in/ - invalid code (with 2fa ON) -  contains letters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsondata = pm.response.json();\r",
											"\r",
											"\r",
											"var schema = {    \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"   \r",
											"//1\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"// pm.test(\"Body matches string - TFA required\", function () {\r",
											"//     pm.expect(pm.response.text()).to.include(\"TFA required\");\r",
											"// });\r",
											"\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											" //4\r",
											"pm.test(\"Code is incorrect - pass\", () => { \r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Code is incorrect\")\r",
											"    }) \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"isabaleuski@omertex.com\",\r\n    \"password\": \"12345TeST!\",\r\n    \"lang\": \"en\",\r\n    \"code\": \"34331a\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-in",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-in/ - WITH code   when 2fa is off",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsondata = pm.response.json();\r",
											"\r",
											"\r",
											"var schema = {    \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"   \r",
											"//1\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"// pm.test(\"Body matches string - TFA required\", function () {\r",
											"//     pm.expect(pm.response.text()).to.include(\"TFA required\");\r",
											"// });\r",
											"\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											" //4\r",
											"pm.test(\"Code is incorrect - pass\", () => { \r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Code is incorrect\")\r",
											"    }) \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"isabaleuski@omertex.com\",\r\n    \"password\": \"12345TeST!\",\r\n    \"lang\": \"en\",\r\n    \"code\": \"343311\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-in",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/sign-in/ -  PUT instead of POST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {    \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"stack\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"code\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"stack\",\r",
											"    \"code\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 405\", () => {\r",
											"    pm.response.to.have.status(405)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4    \r",
											"pm.test(\"E_ROUTE_NOT_FOUND: Cannot PUT:/auth/sign-in message - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"E_ROUTE_NOT_FOUND: Cannot PUT:/auth/sign-in\")\r",
											"    })  \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"isabaleuski@omertex.com\",\r\n    \"password\": \"12345TeST!\",\r\n    \"lang\": \"en\",\r\n    \"code\": \"343311\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/sign-in",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /auth/password/resend-code",
					"item": [
						{
							"name": "POST /auth/password/resend-code - success",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{exUserLogin221}}\",\r\n    \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/resend-code",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"resend-code"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/resend-code -  empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"The email is required\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"The email is required\")\r",
											"    })    \r",
											"    \r",
											"//5    \r",
											"pm.test(\"The lang is required\", () => {\r",
											"    pm.expect(jsondata.errors[1].message).to.equal(\"The lang is required\")\r",
											"    })    \r",
											"\r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/resend-code",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"resend-code"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/resend-code - invalid email - without domain part",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Invalid email format\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"dasdasdasd\",\r\n    \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/resend-code",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"resend-code"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/resend-code -  invalid email - without local part",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"  \r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4    \r",
											"pm.test(\"Invalid email format\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })      \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"@mail.ru\",\r\n    \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/resend-code",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"resend-code"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/resend-code -  invalid email - without dot at domain part",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Invalid email format\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"a@mailru\",\r\n    \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/resend-code",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"resend-code"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/resend-code -  invalid email - without second part of domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											" //1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Invalid email format\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"a@mail.\",\r\n    \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/resend-code",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"resend-code"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/resend-code -  invalid email - at least two symbols after",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											" //1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Invalid email format\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })    \r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"aas@s.a\",\r\n    \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/resend-code",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"resend-code"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/resend-code -  invalid email - space before email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"       \r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Invalid email format\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })    \r",
											"\r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \" aas@ss.a\",\r\n    \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/resend-code",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"resend-code"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/resend-code -  invalid email - not existed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"       \r",
											"//1\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"User not found message\", () => { \r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"User not found\")\r",
											"    })    \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"bit_test_iontest_s543534@yopmail.com\",\r\n    \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/resend-code",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"resend-code"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/resend-code -  invalid language code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"args\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"choices\": {\r",
											"                  \"type\": \"array\",\r",
											"                  \"items\": [\r",
											"                    {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    {\r",
											"                      \"type\": \"string\"\r",
											"                    }\r",
											"                  ]\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"choices\"\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\",\r",
											"            \"args\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"enum validation failed on lang\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"enum validation failed on lang\")\r",
											"    })    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"bit_test_ion@yopmail.com\",\r\n    \"lang\": \"esn\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/resend-code",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"resend-code"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/resend-code -  valid language code - ru",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = { \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"User not found\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"User not found\")\r",
											"    })    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"bit_test_ion@yopmail.com\",\r\n    \"lang\": \"ru\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/resend-code",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"resend-code"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/resend-code -   invalid type of email value (array)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"   \r",
											"\r",
											" //1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"string validation failed on email\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"string validation failed on email\")\r",
											"    })    \r",
											"     \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": [\"bit_test_ion@yopmail.com\"],\r\n    \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/resend-code",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"resend-code"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/resend-code - GET istead of POST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {     \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"stack\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"code\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"stack\",\r",
											"    \"code\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 405\", () => {\r",
											"    pm.response.to.have.status(405)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    }) \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"//4    \r",
											"pm.test(\"E_ROUTE_NOT_FOUND: Cannot GET:/auth/password/resend-code message - isn't matched\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"E_ROUTE_NOT_FOUND: Cannot GET:/auth/password/resend-code\")\r",
											"    })  \r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"bit_test_ion@yopmail.com\",\r\n    \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/resend-code",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"resend-code"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /auth/password/new",
					"item": [
						{
							"name": "POST /auth/password/new - Code is outdated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"\r",
											"\r",
											"token = jsondata.token\r",
											"\r",
											"pm.environment.set (\"token\", token)\r",
											"\r",
											"\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"    \r",
											"//1\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Code is outdated - message\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Code is outdated\")\r",
											"    })     \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"email\":\"shokojiadko@gmail.com\",\r\n\"confirm_password\":\"12345TeST!\",\r\n\"password\":\"12345TeST!\",\r\n\"code\":\"432435\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new  - empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"  \r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"The confirm_password is required - message\", () => {\r",
											"    pm.expect(jsondata.errors[1].message).to.equal(\"The confirm_password is required\")\r",
											"    }) \r",
											"\r",
											"//5\r",
											"pm.test(\"The password is required - message\", () => {\r",
											"    pm.expect(jsondata.errors[2].message).to.equal(\"The password is required\")\r",
											"    })   \r",
											"\r",
											"//6\r",
											"pm.test(\"Code is required - message\", () => {\r",
											"    pm.expect(jsondata.errors[3].message).to.equal(\"The code is required\")\r",
											"    })    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new - password  -  password != confirm_password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4    \r",
											"pm.test(\"Passwords do not match - message\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Passwords do not match\")\r",
											"    })   \r",
											"\r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{exUserLogin221}}\",\r\n    \"password\": \"Password!1\",\r\n    \"confirm_password\": \"Password!12\",\r\n    \"code\": \"121241\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new - password -  at least one Uppercase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"  \r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Password do not match the conditions - message\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Password do not match the conditions\")\r",
											"    })       \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"a@mail.ru\",\r\n    \"password\": \"assword!1\",\r\n    \"confirm_password\": \"assword!1\",\r\n    \"code\": \"121241\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new - password  -  at least one Lowercase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Password do not match the conditions - message\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Password do not match the conditions\")\r",
											"    })       \r",
											"    \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"a@mail.ru\",\r\n    \"password\": \"ASSWORD!1\",\r\n    \"confirm_password\": \"ASSWORD!1\",\r\n    \"code\": \"121241\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new  - password-  valid special characters in password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											" \r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Password do not match the conditions - message\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).not.to.equal(\"Password do not match the conditions\")\r",
											"    })       \r",
											"    \r",
											"       \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"assas\",\r\n    \"password\": \"pASSWORD1@$!%*?&#^\",\r\n    \"confirm_password\": \"pASSWORD1@$!%*?&#^\",\r\n    \"code\": \"121241\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new- password  -  INvalid special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Password do not match the conditions - message\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Password do not match the conditions\")\r",
											"    })   \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"a@mail.ru\",\r\n    \"password\": \"pASSWORD1<>\",\r\n    \"confirm_password\": \"pASSWORD1<>\",\r\n    \"code\": \"121241\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new- password  -  at least one number in password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Password do not match the conditions - message\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Password do not match the conditions\")\r",
											"    })   \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"a@mail.ru\",\r\n    \"password\": \"pASSWORD<>\",\r\n    \"confirm_password\": \"pASSWORD<>\",\r\n    \"code\": \"121241\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new - password  - password length < MIN password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											" //1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4    \r",
											"pm.test(\"Password do not match the conditions - message\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Password do not match the conditions\")\r",
											"    })    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"a@mail.ru\",\r\n    \"password\": \"pA1#^\",\r\n    \"confirm_password\": \"pA1#^\",\r\n    \"code\": \"121241\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new - password - password length == MIN password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Password do not match the conditions - message\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).not.to.equal(\"Password do not match the conditions\")\r",
											"    })   \r",
											"\r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{exUserLogin221}}\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n    \"code\": \"121241\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new - email  - password with spaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Password do not match the conditions - message\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Password do not match the conditions\")\r",
											"    })   \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"a@mail.ru\",\r\n    \"password\": \" pA1234#^\",\r\n    \"confirm_password\": \" pA1234#^\",\r\n    \"code\": \"121241\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new - email   - password with cyrillic symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Password do not match the conditions - message\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Password do not match the conditions\")\r",
											"    })    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"a@mail.ru\",\r\n    \"password\": \"аяA1234#^\",\r\n    \"confirm_password\": \"аяA1234#^\",\r\n    \"code\": \"121241\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new - email  - without domain part",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											" //1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4    \r",
											"pm.test(\"Invalid email format - message\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"dasdasdasd\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n    \"code\": \"121241\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new - email  - without local part",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"    \r",
											" //1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Invalid email format - message\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"@mail.ru\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n    \"code\": \"121241\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new - email - without dot at domain part",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											" \r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4    \r",
											"pm.test(\"Invalid email format - message\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })       \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"dasdasdasd\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n\r\n    \"code\": \"121241\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new - email  - without second part of domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											" //1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Invalid email format - message\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })       \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"a@mail.\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n\r\n    \"code\": \"121241\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new - email   - at least two symbols after  .",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Invalid email format - message\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"aas@s.a\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n\r\n\r\n    \"code\": \"121241\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new  - email  -  space before email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"   \r",
											" //1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Invalid email format - message\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Invalid email format\")\r",
											"    })    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"aas@ss.a\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n    \"code\": \"121241\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new - code- int type instead of string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {    \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4    \r",
											"pm.test(\"string validation failed on code - message\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"string validation failed on code\")\r",
											"    })    \r",
											"\r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"aas@ss.aa\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n    \"code\": 80483\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new  - code - length < 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"args\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"minLength\": {\r",
											"                  \"type\": \"integer\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"minLength\"\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\",\r",
											"            \"args\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Minimum code length is 6 characters\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Minimum code length is 6 characters\")\r",
											"    })   \r",
											"\r",
											" //5\r",
											"pm.test(\"minLength  is 6 characters\", () => {\r",
											"    pm.expect(jsondata.errors[0].args.minLength).to.equal(6)\r",
											"    })     \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"aas@ss.aa\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n    \"code\": \"8043\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new   - code - length > 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"args\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"maxLength\": {\r",
											"                  \"type\": \"integer\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"maxLength\"\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\",\r",
											"            \"args\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"  //1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Maximum code length is 6 characters\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Maximum code length is 6 characters\")\r",
											"    })   \r",
											"//4\r",
											"pm.test(\"maxLength - 6 characters\", () => {\r",
											"    pm.expect(jsondata.errors[0].args.maxLength).to.equal(6)\r",
											"    })       \r",
											" \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"aas@ss.aa\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n    \"code\": \"8043627\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new   - code - spaces in code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Code is incorrect\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Code is incorrect\")\r",
											"    })    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"aas@ss.aa\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n    \"code\": \"    27\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new   - code - entered code != expected code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Code is incorrect\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Code is incorrect\")\r",
											"    })   \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear \r",
											"    pm.sendRequest({\r",
											"        'method': 'POST',\r",
											"  'url': 'https://dev.btr.omertex.com/auth/password/resend-code',\r",
											"        header: {\r",
											"            'content-type': 'application/json',\r",
											"\r",
											"            'Accept': \"*/*\"\r",
											"        },\r",
											"\r",
											" body: JSON.stringify({\r",
											"    \"email\": pm.environment.get(\"exUserLogin221\"),\r",
											"    \"lang\": \"en\"\r",
											"  })\r",
											"\r",
											"    },\r",
											"\r",
											"  (err, res) => {\r",
											"    \r",
											"   \r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{exUserLogin221}}\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n    \"code\": \"213123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new -  code - figures in code value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Code is incorrect\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Code is incorrect\")\r",
											"    })    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear \r",
											"    pm.sendRequest({\r",
											"        'method': 'POST',\r",
											"  'url': 'https://dev.btr.omertex.com/auth/password/resend-code',\r",
											"        header: {\r",
											"            'content-type': 'application/json',\r",
											"            'Accept': \"*/*\"\r",
											"        },\r",
											"\r",
											" body: JSON.stringify({\r",
											"    \"email\": pm.environment.get(\"exUserLogin221\"),\r",
											"    \"lang\": \"en\"\r",
											"  })\r",
											"\r",
											"    },\r",
											"\r",
											"  (err, res) => {\r",
											"    \r",
											"   \r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{exUserLogin221}}\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n\"code\": \"000a00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new  - code - special characters (valid) in code value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"Code is incorrect\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"Code is incorrect\")\r",
											"    })    \r",
											"     \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// clear \r",
											"    pm.sendRequest({\r",
											"        'method': 'POST',\r",
											"  'url': 'https://dev.btr.omertex.com/auth/password/resend-code',\r",
											"        header: {\r",
											"            'content-type': 'application/json',\r",
											"            'Accept': \"*/*\"\r",
											"        },\r",
											"\r",
											" body: JSON.stringify({\r",
											"    \"email\": pm.environment.get(\"exUserLogin221\"),\r",
											"    \"lang\": \"en\"\r",
											"  })\r",
											"\r",
											"    },\r",
											"\r",
											"  (err, res) => {\r",
											"    \r",
											"   \r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{exUserLogin221}}\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n \"code\": \"000%00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new  - email-  invalid type of email value (array)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"string validation failed on email\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"string validation failed on email\")\r",
											"    })    \r",
											"    \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": [\"bit_test_ion@yopmail.com\"],\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": \"pA1234#^\",\r\n \"code\": \"000%00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new -  invalid type of password value (array)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4\r",
											"pm.test(\"string validation failed on password\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"string validation failed on password\")\r",
											"})    \r",
											"     \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"bit_test_ion@yopmail.com\",\r\n    \"password\": [\"pA1234#^\"],\r\n    \"confirm_password\": \"pA1234#^\",\r\n \"code\": \"000%00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /auth/password/new -  invalid type of repeat password value (array)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"var schema = {   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"rule\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"field\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"rule\",\r",
											"            \"field\",\r",
											"            \"message\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"//1\r",
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422)\r",
											"    })\r",
											"\r",
											"//2    \r",
											"pm.test(\"Schema is correct\", () => {\r",
											"    pm.expect(tv4.validate(jsondata, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"//3     \r",
											"loadtime = pm.environment.get(\"loadTime\")\r",
											"pm.test(\"Load time is less\"+ loadtime, () => {\r",
											"    loadtime = pm.environment.get(\"loadTime\")\r",
											"    pm.expect(pm.response.responseTime).to.be.below((parseInt(loadtime)))\r",
											"    })\r",
											"\r",
											"//4    \r",
											"pm.test(\"string validation failed on confirm_password\", () => {\r",
											"    pm.expect(jsondata.errors[0].message).to.equal(\"string validation failed on confirm_password\")\r",
											"    })    \r",
											"    \r",
											"    \r",
											"    //  pm.test(\"Schema\", function () {\r",
											"    // pm.expect(tv4.validate(jsondata, schema)).to.be.true})\r",
											"\r",
											"    \r",
											"    \r",
											"     \r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"bit_test_ion@yopmail.com\",\r\n    \"password\": \"pA1234#^\",\r\n    \"confirm_password\": [\"pA1234#^\"],\r\n \"code\": \"000000\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BACKEND_API}}/auth/password/new",
									"host": [
										"{{BACKEND_API}}"
									],
									"path": [
										"auth",
										"password",
										"new"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}